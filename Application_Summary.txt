Application_Summary.txt
/*
Here's a high-level summary of the flow of execution of this application, starting from `app_main()`:

1. Initialization:
    - `app_main()` initializes system functions.
    - `initialize_gpio()` is called to set up GPIO pins for button input.
    - `initialize_uart()` is called to set up the UART interface, which is used for communication with an external device.

2. Bluetooth Configuration:
    - The Bluetooth controller and Bluetooth Host (Bluedroid) are initialized.
    - `register_gap_callbacks()` is called to register GAP callback functions.
    - `register_hf_client_callbacks()` is called to register Hands-Free (HF) client callback functions.

3. Bluetooth Operation:
    - Bluetooth device discovery is initiated using `esp_bt_gap_start_discovery()`.
    - Upon discovering a target device, the application initiates a connection using `esp_bt_gap_ssp_confirm_reply()`.
    - Once the device is connected and the Hands-Free (HF) service is discovered, audio and control channels are established.

4. PCM and AEC Configuration (if enabled):
    - `app_gpio_pcm_io_cfg()` is called to configure the GPIO pins for Pulse Code Modulation (PCM) audio data.
    - If the Acoustic Echo Cancellation (AEC) feature is enabled (`ACOUSTIC_ECHO_CANCELLATION_ENABLE`), `app_gpio_aec_io_cfg()` is called to set up the required GPIO pins for the AEC process.

5. UART Operations:
    - The application waits for data on the UART interface. When data arrives:
        - `uart_event_handler()` processes the UART events.
        - For data events, `uart_read_bytes()` reads the incoming bytes.
        - The data read from UART is then parsed using the `hf_msg_parse()` function, one character at a time.
        - Once a full message is parsed, a registered callback (`hf_msg_args_parser()`) processes the parsed message, splitting it into commands and arguments.
        - Commands are then matched against a command table, and if found, the associated command handler is invoked.

6. User Input (Button Press):
    - If a button is pressed, `gpio_isr_handler()` is triggered.
    - Depending on the button pressed, different Bluetooth actions are initiated, such as:
        - Answering/Hanging up a call.
        - Starting/Stopping audio.
        - Voice recognition activation.

7. Bluetooth Events:
    - As the application interacts with the Bluetooth stack, various callback functions are triggered in response to events, such as:
        - Discovery events (`esp_bt_gap_cb()`)
        - Connection status changes (`hf_client_connection_state_callback()`)
        - Audio connection changes (`hf_client_audio_state_callback()`)
        - Call status updates (`hf_client_call_status_callback()`)
        - And more...

In essence, the application starts by initializing hardware peripherals and the Bluetooth stack, then actively listens for UART data and button presses while interacting with Bluetooth devices. The application is designed to process incoming commands from UART and execute Bluetooth operations like answering calls, managing audio, etc.
*/